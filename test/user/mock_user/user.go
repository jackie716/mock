// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package mock_user is a generated GoMock package.
package mock_user

import (
	gomock "github.com/golang/mock/gomock"
	user "github.com/golang/mock/test/user"
	net "net"
	reflect "reflect"
)

// MockUserService is a mock of UserService interface
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// GetUserById mocks base method
func (m *MockUserService) GetUserById(id int) user.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(user.User)
	return ret0
}

// GetUserById indicates an expected call of GetUserById
func (mr *MockUserServiceMockRecorder) GetUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserService)(nil).GetUserById), id)
}

// UpdateUser mocks base method
func (m *MockUserService) UpdateUser(id int, u user.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", id, u)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser
func (mr *MockUserServiceMockRecorder) UpdateUser(id, u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserService)(nil).UpdateUser), id, u)
}

// UpdateUsers mocks base method
func (m *MockUserService) UpdateUsers(u user.User, ids ...int) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{u}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateUsers", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUsers indicates an expected call of UpdateUsers
func (mr *MockUserServiceMockRecorder) UpdateUsers(u interface{}, ids ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{u}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUsers", reflect.TypeOf((*MockUserService)(nil).UpdateUsers), varargs...)
}

// Find mocks base method
func (m *MockUserService) Find(a int, b map[string]int, c net.Conn, d []net.Conn, e [3]int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Find", a, b, c, d, e)
}

// Find indicates an expected call of Find
func (mr *MockUserServiceMockRecorder) Find(a, b, c, d, e interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserService)(nil).Find), a, b, c, d, e)
}
